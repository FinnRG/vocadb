@using System.Globalization
@using VocaDb.Model.DataContracts.Users
@using VocaDb.Model.Domain.Users
@using VocaDb.Web.Code
@using VocaDb.Web.Helpers
@using VocaDb.Model.Domain.Security
@using VocaDb.Model.Utils
@using VocaDb.Web.Models.Shared.Partials.Album
@using VocaDb.Web.Models.Shared.Partials.Artist
@using VocaDb.Web.Models.Shared.Partials.Comment
@using VocaDb.Web.Models.Shared.Partials.EntryDetails
@using VocaDb.Web.Models.Shared.Partials.Html
@using VocaDb.Web.Models.Shared.Partials.Shared
@using VocaDb.Web.Models.Shared.Partials.Song
@using VocaDb.Web.Models.Shared.Partials.Tag
@using VocaDb.Web.Models.Shared.Partials.User
@using VocaDb.Web.Resources.Domain.Globalization
@using R = ViewRes.User.DetailsStrings
@using Res = ViewRes.User.DetailsStrings
@model ServerOnlyUserDetailsContract

@{
	ViewBag.Parents = new[] {
		Html.ActionLink(ViewRes.SharedStrings.Users, "Index"),
	};

	var ownProfile = (Login.Manager.IsLoggedIn && Login.User.Id == Model.Id && Login.User.Active);
	var canSeeDetailedStats = (ownProfile || !Model.AnonymousActivity || Login.CanModerateUsers);

	var url = VocaUriBuilder.CreateAbsolute(Url.Action("Profile", new { id = Model.Name })).ToString();

}

@functions {
	public string GetLanguageName(UserKnownLanguageContract lang) {
		if (!string.IsNullOrEmpty(lang.CultureCode)) {
			var culture = CultureInfo.GetCultureInfo(lang.CultureCode);
			return culture.NativeName + " - " + culture.EnglishName;
		} else {
			return InterfaceLanguageStrings.Other;
		}
	}
}

@{
	async Task AvatarImg() {
		if (!string.IsNullOrEmpty(Model.Email)) {
			<partial name="Partials/User/_ProfileIcon_IUserWithEmail" model="@(new ProfileIcon_IUserWithEmailViewModel(Model, 120))" />
		} else {
			<img src="@Url.Content("~/Content/unknown.png")" width="120" height="120" alt="Avatar" />
		}
	}

	async Task Avatar() {
		if (UserContext.IsLoggedIn && UserContext.LoggedUserId == Model.Id && Login.User.Active) {
			<a href="http://gravatar.com/emails/" title="@R.SetAvatar" id="avatar" class="user-avatar">
				@{ await AvatarImg(); }
			</a>
		} else {
			await AvatarImg();
		}
	}
}

@section Toolbar {
	@if (ownProfile) {
		<a asp-action="MySettings" id="@("mySettingsLink")">@(R.MySettings)</a>;
		@Html.Raw("&nbsp;")
		<a asp-action="Messages" id="@("messagesLink")">@(R.Messages)</a>;
	}

	@if (UserContext.IsLoggedIn && UserContext.LoggedUserId != Model.Id && Login.User.Active && !Model.Standalone) {
		@Html.ActionLink(R.ComposeMessage, "Messages", null, null, null, "composeTab", new { receiverName = Model.Name }, new { id = "composeMessageLink" });
	}

	@if (Login.CanManageUsers && EntryPermissionManager.CanEditUser(UserContext, Model.GroupId)) {
		@Html.Raw("&nbsp;")
		<a asp-action="Edit" asp-route-id="@(Model.Id)" id="@("editUserLink")">@(ViewRes.SharedStrings.Edit)</a>;
	}
	@if (Login.Manager.HasPermission(PermissionToken.ReportUser) && UserContext.LoggedUserId != Model.Id && Model.Active) {
		@Html.Raw("&nbsp;")
		<a href="" id="reportUserLink" data-bind="click: function() { reportUserViewModel.show(); }">@Res.ReportSpamming</a>
	}
	@if (Login.Manager.HasPermission(PermissionToken.RemoveEditPermission) && UserContext.LoggedUserId != Model.Id && Model.GroupId != UserGroupId.Limited && Model.Active && EntryPermissionManager.CanEditUser(Login.Manager, Model.GroupId)) {
		@Html.Raw("&nbsp;")
		<a href="" id="setToLimitedLink" data-bind="click: function() { limitedUserViewModel.show(); }">@ViewRes.SharedStrings.SetToLimited</a>
	}
	@if (Login.Manager.HasPermission(PermissionToken.DisableUsers) && UserContext.LoggedUserId != Model.Id && Model.Active) {
		@Html.Raw("&nbsp;")
		<a asp-action="Disable" asp-route-id="@(Model.Id)" id="@("disableUserLink")">@(R.Disable)</a>;
	}
}

@if (ownProfile && Login.User.GroupId == UserGroupId.Limited) {
	<div class="alert">
		<h4>Why is my user group "Limited user"?</h4>
		<p>
			In order to prevent spammers and abusers we use automated tools to check users' IP address.
			If you have a dynamic IP, it's possible that someone with the same IP as you was participating in these activities
			and your account was mistakenly reduced, preventing you from editing the database.
		</p><p>
			If this is the case, please <a asp-action="Index" asp-controller="Help">@("contact us")</a> and we'll take care of it. Thank you.
		</p>
	</div>
}
@if (ownProfile && Model.PossibleProducerAccount) {
	<div class="alert alert-info">
		@Html.Raw(string.Format(Res.PossibleProducerMessage, Html.ActionLink(Res.ArtistVerificationPage, "RequestVerification")))
	</div>
}

@if (ownProfile && !Model.KnownLanguages.Any()) {
	<div class="alert alert-info">
		@Html.Raw(string.Format(Res.KnownLanguagesMessage, "/User/MySettings#profile"))
	</div>
}

<ul class="nav nav-pills">
	<li data-bind="css: { active: view() == 'Overview' }">
		<a href="#" data-bind="click: function() { setOverview(); }">@Res.Overview</a>
	</li>
	<li data-bind="css: { active: view() == 'Artists' }">
		<a href="#Artists">@Res.FollowedArtistsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Albums' }">
		<a href="#Albums">@Res.CollectionTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Songs' }">
		<a href="#Songs">@Res.FavoriteSongsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'CustomLists' }">
		<a href="#CustomLists">@Res.CustomListsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Comments' }">
		<a href="#Comments">@Res.Comments</a>
	</li>
	<li data-bind="css: { active: view() == 'Events' }">
		<a href="#Events">@Res.Events</a>
	</li>
</ul>

<div data-bind="visible: view() == 'Overview'">
	<div class="row-fluid">
		<div class="span2 well well-transparent user-stats">
			<h4>@Model.Name</h4>
			@{ await Avatar(); }
			<br />
			<p class="withMargin">
				@Translate.UserGroups[Model.GroupId]
				@if (Model.EffectivePermissions.Contains(PermissionToken.DesignatedStaff))
				{
					<span class="label label-important">@R.Staff</span>
				}
				@if (Model.VerifiedArtist)
				{
					<span class="label label-success">@R.VerifiedAccount</span>
				}
				@if (Model.IsVeteran) {
					<span class="label label-success">@string.Format(R.Veteran, BrandableStrings.Layout.SiteName)</span>
				}
				@if (!string.IsNullOrEmpty(Model.CustomTitle)) {
					<span class="label label-info">@Model.CustomTitle</span>
				}
				@if (!Model.Active)
				{
					<span class="label">@R.AccountDisabled</span>
				}
				@if (Model.EmailVerified)
				{
					<img src="@Url.Content("~/Content/Icons/tick.png")" title="@R.VerifiedEmail" />
				}
			</p>

			<h4 class="withMargin">@R.StatsTab</h4>
			<span>
				@{ var submitText = R.Submissions + ": " + Model.SubmitCount; }
				@if (canSeeDetailedStats)
				{
					<text><a asp-action="EntryEdits" asp-route-id="@(Model.Id)" asp-route-onlySubmissions="@(true)">@(submitText)</a></text>
				}
				else
				{
					<text>@submitText</text>
				}
			</span><br />
			<span>
				@{ var editText = R.TotalEdits + ": " + Model.EditCount; }
				@if (canSeeDetailedStats)
				{
					<a asp-action="EntryEdits" asp-route-id="@(Model.Id)" asp-route-onlySubmissions="@(false)">@(editText)</a>
				}
				else
				{
					<text>@editText</text>
				}
			</span><br />
			<span>
				@{ var commentText = R.CommentsMade + ": " + Model.CommentCount; }
				@if (canSeeDetailedStats)
				{
					<a asp-action="Index" asp-controller="Comment" asp-route-userId="@Model.Id">@commentText</a>
				}
				else
				{
					<text>@commentText</text>
				}
			</span><br />
			<span>@R.TagVotes: @Model.TagVotes</span><br />
			<span>@R.Power: @Model.Power (@R.Level @Model.Level)</span>

			<h4 class="withMargin">@R.MemberSince</h4>
			@Model.CreateDate.ToShortDateString()
			
			@if (Model.OldUsernames.Any()) {
				<h4 class="withMargin">@R.OldUsernames</h4>
				foreach (var oldName in Model.OldUsernames) {
					@oldName.OldName@:
					@(string.Format(R.OldNameUntil, oldName.Date.ToShortDateString()) + (oldName != Model.OldUsernames.Last() ? "," : ""))@:
				}
			}

			@if (Model.Supporter) {
				<div class="withMargin media">
					<img class="pull-left" style="margin-top: 2px;" src="@Url.Content("~/Content/pixelart-miku.png")" />
					<div class="media-body">
						@string.Format(Res.SupporterTitle, BrandableStrings.Layout.SiteName)
					</div>
				</div>
			}
		</div>

		<div class="span8 well well-transparent">

			@if (!string.IsNullOrEmpty(Model.AboutMe))
			{
				<h4>@R.AboutMe</h4>
				<partial name="Partials/Html/_FormatMarkdown" model="@(new FormatMarkdownViewModel(Model.AboutMe))" />
				<br />
			}
			
			@if (Model.KnownLanguages.Any()) {
				<h4>@Res.LanguagesIKnow</h4>
				<ul class="user-known-languages">
				@foreach (var lang in Model.KnownLanguages) {
					<li>
						<partial name="Partials/Html/_LanguageFlag" model="@(new LanguageFlagViewModel(lang.CultureCode))" />
						@GetLanguageName(lang)
						@if (lang.Proficiency != UserLanguageProficiency.Nothing) {
							@:(@Translate.UserLanguageProficiencyNames[lang.Proficiency])
						}
					</li>
				}
				</ul>
			}

			@if (Model.OwnedArtistEntries.Any())
			{
				<h4>@R.VerifiedOwner</h4>
				<partial name="Partials/Artist/_ArtistGrid" model="@(new ArtistGridViewModel(Model.OwnedArtistEntries.Select(a => a.Artist), 3, true))" />
				<br />
			}

			@if (Model.WebLinks.Any())
			{
				<h4 class="withMargin">@ViewRes.EntryDetailsStrings.ExternalLinks</h4>
				<partial name="Partials/EntryDetails/_ExternalLinksList" model="@(new ExternalLinksListViewModel(Model.WebLinks))" />
				<br />
			}

			@if (!string.IsNullOrEmpty(Model.TwitterName))
			{
				<h4>@R.TwitterAccount</h4>
				<a href="@("https://twitter.com/" + Model.TwitterName)" class="extLink">@Model.TwitterName</a>
				<br /><br />
			}

			@if (!string.IsNullOrEmpty(Model.Location))
			{
				<h4>@R.Location</h4>
				@Model.Location
				<br /><br />
			}

			@if (Model.FavoriteTags.Any())
			{
				<h4>@R.FavoriteTags</h4>
				<partial name="Partials/Tag/_TagList" model="@(new TagListViewModel(Model.FavoriteTags))" />
				<br />
				<div style="width: 400px; height: 200px;" data-bind="highcharts: ratingsByGenreChart"></div>
				<br />
			}

			@if (ownProfile && !Login.CanManageUsers)
			{
				if (Model.AdditionalPermissions.Any())
				{
					<h4>@R.AdditionalPermissions</h4>
					@Translate.AllPermissionTokenNames(Model.AdditionalPermissions)
				}
			}
			else if (Login.CanManageUsers)
			{
				<h4>@R.LastLogin</h4>
				<partial name="Partials/Shared/_UniversalTimeLabel" model="@(new UniversalTimeLabelViewModel(Model.LastLogin))" />
				if (Login.CanManageUsers) {
					@:(@Model.LastLoginAddress)
					<a href='https://www.geodatatool.com/?ip=@Model.LastLoginAddress'>GeoDataTool</a>
					<a data-bind="click: checkSFS" href='#'>StopForumSpam</a>
					<a data-bind="click: addBan" href='#'>Add to banned IPs</a>
				}

				if (Model.AdditionalPermissions.Any()) {
					<h4 class="withMargin">@R.AdditionalPermissions</h4>
					@Translate.AllPermissionTokenNames(Model.AdditionalPermissions)
				}

				if (!string.IsNullOrEmpty(Model.Email))
				{
					<h4 class="withMargin">@R.Email</h4>
					@Model.Email
					if (Model.EmailVerified)
					{
						<img src="@Url.Content("~/Content/Icons/tick.png")" title="Verified email" />
					}
				}

				<h4 class="withMargin">@R.EffectivePermissions</h4>
				@Translate.AllPermissionTokenNames(Model.EffectivePermissions)
			}

		</div>
	</div>

	<br />

	@if (Model.FavoriteAlbums.Any())
	{
		<div class="well well-transparent" id="favoriteAlbums">
			<div class="pull-right">
				<small>
					<a href="#Albums">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#Albums">
					@R.SomeAlbumsILike
					<small>(@string.Format(R.Total, Model.AlbumCollectionCount))</small>
				</a>
			</h3>
			<partial name="Partials/Album/_AlbumThumbs" model="@(new AlbumThumbsViewModel(Model.FavoriteAlbums))" />
		</div>
	}

	@if (Model.LatestRatedSongs.Any())
	{
		<div class="well well-transparent">
			<div class="pull-right">
				<small>
					<a href="#Songs">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#Songs">
					@R.SomeSongsILike
					<small>(@string.Format(R.Total, Model.FavoriteSongCount))</small>
				</a>
			</h3>
			<partial name="Partials/Song/_SongGrid" model="@(new SongGridViewModel(Model.LatestRatedSongs, 3))" />
		</div>
	}

	@if (Model.FollowedArtists.Any())
	{
		<div class="well well-transparent">
			<div class="pull-right">
				<small>
					<a href="#Artists">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#Artists">
					@R.SomeArtistsIFollow
					<small>(@string.Format(R.Total, Model.ArtistCount))</small>
				</a>
			</h3>
			<partial name="Partials/Artist/_ArtistGrid" model="@(new ArtistGridViewModel(Model.FollowedArtists, 3))" />
		</div>
	}
	
	<div class="well well-transparent">
		<div class="pull-right">
			<small>
				<a href="#Comments">@ViewRes.SharedStrings.ShowMore</a>
			</small>
		</div>
		<h3>
			<a href="#Comments">
				@ViewRes.EntryDetailsStrings.LatestComments
			</a>
		</h3>
		<div data-bind="with: comments">
			<partial name="Partials/Comment/_EditableComments" model="@(new EditableCommentsViewModel(!Model.Standalone && UserContext.HasPermission(PermissionToken.CreateComments), well: false, commentsBinding: "topComments", newCommentRows: 3))" />
			<!-- ko ifnot: comments().length -->
			<p>@ViewRes.EntryDetailsStrings.NoComments</p>
			<!-- /ko -->
		</div>

	</div>
</div>

<div data-bind="visible: view() == 'Artists', with: followedArtistsViewModel, show" class="js-cloak">
	<partial name="Partials/_FollowedArtists" />
</div>

<div data-bind="visible: view() == 'Albums', with: albumCollectionViewModel, show" class="js-cloak">
	<partial name="Partials/_AlbumCollection" />
</div>

<div data-bind="visible: view() == 'Songs', with: ratedSongsViewModel, show" class="js-cloak">
	<partial name="Partials/_RatedSongs" />
</div>

<div data-bind="visible: view() == 'CustomLists', with: songLists, show" class="js-cloak">
	<partial name="Partials/_SongLists" />
</div>

<div data-bind="visible: view() == 'Comments', show" class="well well-transparent js-cloak">
	<div data-bind="with: comments">
		<partial name="Partials/Comment/_EditableComments" model="@(new EditableCommentsViewModel(!Model.Standalone && UserContext.HasPermission(PermissionToken.CreateComments), well: false))" />
	</div>
</div>

<div data-bind="visible: view() == 'Events', show" class="js-cloak">
	<partial name="Partials/_Events" />
</div>

@if (Login.CanManageUsers) {
	<div id="sfsCheckDialog" title="StopForumSpam check"></div>
}

<partial name="Partials/EntryDetails/_EntryDeletePopupBase" model="@(new EntryDeletePopupBaseViewModel("Please confirm that you wish to remove user's editing permissions. You may provide additional explanation below (optional).", "limitedUserViewModel", "setToLimitedLink", "Remove editing permissions", "Confirm"))" />
<partial name="Partials/EntryDetails/_EntryDeletePopupBase" model="@(new EntryDeletePopupBaseViewModel("Please confirm that you wish to report user. Please provide additional explanation below.", "reportUserViewModel", "reportUserLink", "Report user", "Confirm"))" />

@section Head {
	<remikus path="/Scripts/jqwidgets27/styles/css.css" />
}

@section BodyScripts {
	<link rel="stylesheet" href="@Url.Content("~/Content/Styles/songlist.css")" type="text/css" />
	<remikus path="/bundles/jqxRating.js" />
	<script src="@Url.Content("~/Scripts/soundcloud-api.js")" type="text/javascript"></script>
	<script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>
	<script type="text/javascript">
		var artistId = @ToJS((int?)ViewBag.ArtistId);
		var childVoicebanks = @ToJS((bool?)ViewBag.ChildVoicebanks);
		var confirmDisableStr = '@R.ConfirmDisable';
		var lastLoginAddress = '@(UserContext.HasPermission(PermissionToken.ManageIPRules) ? Model.LastLoginAddress : "")';
		var model = {
			id: @Model.Id,
			latestComments: @ToJS(Model.LatestComments),
		};
		var publicCollection = @ToJS(Model.PublicAlbumCollection || Model.Id == UserContext.LoggedUserId);
		app.UserDetails(
			artistId,
			childVoicebanks,
			confirmDisableStr,
			lastLoginAddress,
			model,
			publicCollection,
		);
	</script>
}